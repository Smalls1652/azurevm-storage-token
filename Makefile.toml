env_scripts = [
# Parse and set 'BUILD_TARGET' environment variable.
'''
#!@duckscript

input_target = get_env BUILD_TARGET

if is_empty ${input_target}
    input_target = get_env CARGO_MAKE_RUST_TARGET_TRIPLE
end

set_env BUILD_TARGET ${input_target}
''',
# Parse and set 'CONTAINER_BUILD_TAG' environment variable.
'''
#!@duckscript

task_name = get_env CARGO_MAKE_TASK

if not equals ${task_name} "create-container-image"
    return
end

input_tag = get_env CONTAINER_BUILD_TAG
input_tag_arg = array_get ${@} 0

if not is_empty ${input_tag_arg}
    input_tag = set "${input_tag_arg}"
end

if is_empty ${input_tag}
    input_tag = set "fediproto-sync-local:latest"
end

set_env CONTAINER_BUILD_TAG ${input_tag}
''',
# Parse and set 'CONTAINER_BUILD_PLATFORM' environment variable.
'''
#!@duckscript

task_name = get_env CARGO_MAKE_TASK

if not equals ${task_name} "create-container-image"
    return
end

input_platform = get_env CONTAINER_BUILD_PLATFORM
input_platform_arg = array_get ${@} 1

if not is_empty ${input_platform_arg}
    input_platform = set "${input_platform_arg}"
end

if is_empty ${input_platform}
    input_platform = set "linux/amd64"
end

set_env CONTAINER_BUILD_PLATFORM ${input_platform}
''',
# Parse and set 'BUILD_PACKAGE_NAME' environment variable.
'''
#!@duckscript

task_name = get_env CARGO_MAKE_TASK

if not equals ${task_name} "build-package"
    return
end

input_package = get_env BUILD_PACKAGE_NAME
input_package_arg = array_get ${@} 0

if not is_empty ${input_package_arg}
    input_package = set "${input_package_arg}"
end

if is_empty ${input_package}
    input_package = set "fediproto-sync"
end

set_env BUILD_PACKAGE_NAME ${input_package}
'''
]

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

# Overrides

## Run test.
[tasks.test]
args = ["test", "--", "--show-output"]

# Core

## Format code.
[tasks.rustfmt]
category = "core"
description = "Format code"

command = "cargo"
args = ["--verbose", "fmt"]

## Build a package in the workspace.
[tasks.build-package]
category = "core"
description = "Build a package in the workspace."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}"]

## Build a package in the workspace for a specific target.
[tasks.build-package-target]
category = "core"
description = "Build a package in the workspace for a specific target."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}", "--target=${BUILD_TARGET}"]

## Build a package in the workspace in release mode.
[tasks.build-package-release]
category = "core"
description = "Build a package in the workspace in release mode."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}", "--target=${BUILD_TARGET}"]
